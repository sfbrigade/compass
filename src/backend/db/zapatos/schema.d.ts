/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **account**
   * - Table in database
   */
  export namespace account {
    export type Table = 'account';
    export interface Selectable {
      /**
      * **account.access_token**
      * - `text` in database
      * - Nullable, no default
      */
      access_token: string | null;
      /**
      * **account.account_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      account_id: string;
      /**
      * **account.expires_at**
      * - `int4` in database
      * - Nullable, no default
      */
      expires_at: number | null;
      /**
      * **account.id_token**
      * - `text` in database
      * - Nullable, no default
      */
      id_token: string | null;
      /**
      * **account.provider_account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_account_id: string;
      /**
      * **account.provider_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_name: string;
      /**
      * **account.refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      refresh_token: string | null;
      /**
      * **account.scope**
      * - `text` in database
      * - Nullable, no default
      */
      scope: string | null;
      /**
      * **account.session_state**
      * - `text` in database
      * - Nullable, no default
      */
      session_state: string | null;
      /**
      * **account.token_type**
      * - `text` in database
      * - Nullable, no default
      */
      token_type: string | null;
      /**
      * **account.user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      user_id: string | null;
    }
    export interface JSONSelectable {
      /**
      * **account.access_token**
      * - `text` in database
      * - Nullable, no default
      */
      access_token: string | null;
      /**
      * **account.account_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      account_id: string;
      /**
      * **account.expires_at**
      * - `int4` in database
      * - Nullable, no default
      */
      expires_at: number | null;
      /**
      * **account.id_token**
      * - `text` in database
      * - Nullable, no default
      */
      id_token: string | null;
      /**
      * **account.provider_account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_account_id: string;
      /**
      * **account.provider_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_name: string;
      /**
      * **account.refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      refresh_token: string | null;
      /**
      * **account.scope**
      * - `text` in database
      * - Nullable, no default
      */
      scope: string | null;
      /**
      * **account.session_state**
      * - `text` in database
      * - Nullable, no default
      */
      session_state: string | null;
      /**
      * **account.token_type**
      * - `text` in database
      * - Nullable, no default
      */
      token_type: string | null;
      /**
      * **account.user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      user_id: string | null;
    }
    export interface Whereable {
      /**
      * **account.access_token**
      * - `text` in database
      * - Nullable, no default
      */
      access_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **account.account_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **account.expires_at**
      * - `int4` in database
      * - Nullable, no default
      */
      expires_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **account.id_token**
      * - `text` in database
      * - Nullable, no default
      */
      id_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **account.provider_account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_account_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **account.provider_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **account.refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      refresh_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **account.scope**
      * - `text` in database
      * - Nullable, no default
      */
      scope?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **account.session_state**
      * - `text` in database
      * - Nullable, no default
      */
      session_state?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **account.token_type**
      * - `text` in database
      * - Nullable, no default
      */
      token_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **account.user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **account.access_token**
      * - `text` in database
      * - Nullable, no default
      */
      access_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **account.account_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      account_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **account.expires_at**
      * - `int4` in database
      * - Nullable, no default
      */
      expires_at?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **account.id_token**
      * - `text` in database
      * - Nullable, no default
      */
      id_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **account.provider_account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_account_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **account.provider_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **account.refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      refresh_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **account.scope**
      * - `text` in database
      * - Nullable, no default
      */
      scope?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **account.session_state**
      * - `text` in database
      * - Nullable, no default
      */
      session_state?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **account.token_type**
      * - `text` in database
      * - Nullable, no default
      */
      token_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **account.user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **account.access_token**
      * - `text` in database
      * - Nullable, no default
      */
      access_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **account.account_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      account_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **account.expires_at**
      * - `int4` in database
      * - Nullable, no default
      */
      expires_at?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **account.id_token**
      * - `text` in database
      * - Nullable, no default
      */
      id_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **account.provider_account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_account_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **account.provider_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **account.refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      refresh_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **account.scope**
      * - `text` in database
      * - Nullable, no default
      */
      scope?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **account.session_state**
      * - `text` in database
      * - Nullable, no default
      */
      session_state?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **account.token_type**
      * - `text` in database
      * - Nullable, no default
      */
      token_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **account.user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'account_pkey' | 'account_provider_name_provider_account_id_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **benchmark**
   * - Table in database
   */
  export namespace benchmark {
    export type Table = 'benchmark';
    export interface Selectable {
      /**
      * **benchmark.attempts_per_trial**
      * - `int2` in database
      * - Nullable, no default
      */
      attempts_per_trial: number | null;
      /**
      * **benchmark.baseline_level**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      baseline_level: number;
      /**
      * **benchmark.benchmark_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      benchmark_id: string;
      /**
      * **benchmark.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **benchmark.current_level**
      * - `int2` in database
      * - Nullable, no default
      */
      current_level: number | null;
      /**
      * **benchmark.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **benchmark.due_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      due_date: Date | null;
      /**
      * **benchmark.frequency**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      frequency: string;
      /**
      * **benchmark.goal_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      goal_id: string | null;
      /**
      * **benchmark.instructions**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      instructions: string;
      /**
      * **benchmark.materials**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      materials: string;
      /**
      * **benchmark.metric_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      metric_name: string;
      /**
      * **benchmark.number_of_trials**
      * - `int2` in database
      * - Nullable, no default
      */
      number_of_trials: number | null;
      /**
      * **benchmark.setup**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      setup: string;
      /**
      * **benchmark.status**
      * - `text` in database
      * - `NOT NULL`, default: `'In Progress'::text`
      */
      status: string;
      /**
      * **benchmark.target_level**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      target_level: number;
      /**
      * **benchmark.trial_count**
      * - `int4` in database
      * - Nullable, no default
      */
      trial_count: number | null;
    }
    export interface JSONSelectable {
      /**
      * **benchmark.attempts_per_trial**
      * - `int2` in database
      * - Nullable, no default
      */
      attempts_per_trial: number | null;
      /**
      * **benchmark.baseline_level**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      baseline_level: number;
      /**
      * **benchmark.benchmark_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      benchmark_id: string;
      /**
      * **benchmark.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **benchmark.current_level**
      * - `int2` in database
      * - Nullable, no default
      */
      current_level: number | null;
      /**
      * **benchmark.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **benchmark.due_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      due_date: db.TimestampTzString | null;
      /**
      * **benchmark.frequency**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      frequency: string;
      /**
      * **benchmark.goal_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      goal_id: string | null;
      /**
      * **benchmark.instructions**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      instructions: string;
      /**
      * **benchmark.materials**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      materials: string;
      /**
      * **benchmark.metric_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      metric_name: string;
      /**
      * **benchmark.number_of_trials**
      * - `int2` in database
      * - Nullable, no default
      */
      number_of_trials: number | null;
      /**
      * **benchmark.setup**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      setup: string;
      /**
      * **benchmark.status**
      * - `text` in database
      * - `NOT NULL`, default: `'In Progress'::text`
      */
      status: string;
      /**
      * **benchmark.target_level**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      target_level: number;
      /**
      * **benchmark.trial_count**
      * - `int4` in database
      * - Nullable, no default
      */
      trial_count: number | null;
    }
    export interface Whereable {
      /**
      * **benchmark.attempts_per_trial**
      * - `int2` in database
      * - Nullable, no default
      */
      attempts_per_trial?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.baseline_level**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      baseline_level?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.benchmark_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      benchmark_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.current_level**
      * - `int2` in database
      * - Nullable, no default
      */
      current_level?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.due_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      due_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.frequency**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      frequency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.goal_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      goal_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.instructions**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      instructions?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.materials**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      materials?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.metric_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      metric_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.number_of_trials**
      * - `int2` in database
      * - Nullable, no default
      */
      number_of_trials?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.setup**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      setup?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.status**
      * - `text` in database
      * - `NOT NULL`, default: `'In Progress'::text`
      */
      status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.target_level**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      target_level?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **benchmark.trial_count**
      * - `int4` in database
      * - Nullable, no default
      */
      trial_count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **benchmark.attempts_per_trial**
      * - `int2` in database
      * - Nullable, no default
      */
      attempts_per_trial?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.baseline_level**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      baseline_level: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **benchmark.benchmark_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      benchmark_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.current_level**
      * - `int2` in database
      * - Nullable, no default
      */
      current_level?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **benchmark.due_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      due_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.frequency**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      frequency?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.goal_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      goal_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.instructions**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      instructions?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.materials**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      materials?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.metric_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      metric_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **benchmark.number_of_trials**
      * - `int2` in database
      * - Nullable, no default
      */
      number_of_trials?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.setup**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      setup: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **benchmark.status**
      * - `text` in database
      * - `NOT NULL`, default: `'In Progress'::text`
      */
      status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **benchmark.target_level**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      target_level: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **benchmark.trial_count**
      * - `int4` in database
      * - Nullable, no default
      */
      trial_count?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **benchmark.attempts_per_trial**
      * - `int2` in database
      * - Nullable, no default
      */
      attempts_per_trial?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.baseline_level**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      baseline_level?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **benchmark.benchmark_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      benchmark_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.current_level**
      * - `int2` in database
      * - Nullable, no default
      */
      current_level?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **benchmark.due_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      due_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.frequency**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      frequency?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.goal_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      goal_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.instructions**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      instructions?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.materials**
      * - `text` in database
      * - `NOT NULL`, default: `''::text`
      */
      materials?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.metric_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      metric_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **benchmark.number_of_trials**
      * - `int2` in database
      * - Nullable, no default
      */
      number_of_trials?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.setup**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      setup?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **benchmark.status**
      * - `text` in database
      * - `NOT NULL`, default: `'In Progress'::text`
      */
      status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **benchmark.target_level**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      target_level?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **benchmark.trial_count**
      * - `int4` in database
      * - Nullable, no default
      */
      trial_count?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'benchmark_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **file**
   * - Table in database
   */
  export namespace file {
    export type Table = 'file';
    export interface Selectable {
      /**
      * **file.content_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      content_type: string;
      /**
      * **file.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **file.ext_s3_path**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ext_s3_path: string;
      /**
      * **file.file_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      file_id: string;
      /**
      * **file.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **file.uploaded_by_user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      uploaded_by_user_id: string | null;
    }
    export interface JSONSelectable {
      /**
      * **file.content_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      content_type: string;
      /**
      * **file.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **file.ext_s3_path**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ext_s3_path: string;
      /**
      * **file.file_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      file_id: string;
      /**
      * **file.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **file.uploaded_by_user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      uploaded_by_user_id: string | null;
    }
    export interface Whereable {
      /**
      * **file.content_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      content_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **file.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **file.ext_s3_path**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ext_s3_path?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **file.file_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      file_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **file.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **file.uploaded_by_user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      uploaded_by_user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **file.content_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      content_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **file.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **file.ext_s3_path**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ext_s3_path: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **file.file_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      file_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **file.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **file.uploaded_by_user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      uploaded_by_user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **file.content_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      content_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **file.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **file.ext_s3_path**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ext_s3_path?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **file.file_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      file_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **file.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **file.uploaded_by_user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      uploaded_by_user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'file_ext_s3_path_key' | 'file_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **goal**
   * - Table in database
   */
  export namespace goal {
    export type Table = 'goal';
    export interface Selectable {
      /**
      * **goal.category**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      category: string;
      /**
      * **goal.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **goal.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **goal.goal_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      goal_id: string;
      /**
      * **goal.iep_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      iep_id: string | null;
    }
    export interface JSONSelectable {
      /**
      * **goal.category**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      category: string;
      /**
      * **goal.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **goal.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **goal.goal_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      goal_id: string;
      /**
      * **goal.iep_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      iep_id: string | null;
    }
    export interface Whereable {
      /**
      * **goal.category**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      category?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **goal.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **goal.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **goal.goal_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      goal_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **goal.iep_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      iep_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **goal.category**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      category: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **goal.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **goal.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **goal.goal_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      goal_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **goal.iep_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      iep_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **goal.category**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      category?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **goal.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **goal.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **goal.goal_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      goal_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **goal.iep_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      iep_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'goal_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **iep**
   * - Table in database
   */
  export namespace iep {
    export type Table = 'iep';
    export interface Selectable {
      /**
      * **iep.case_manager_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      case_manager_id: string | null;
      /**
      * **iep.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **iep.end_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      end_date: Date;
      /**
      * **iep.iep_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      iep_id: string;
      /**
      * **iep.start_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      start_date: Date;
      /**
      * **iep.student_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      student_id: string | null;
    }
    export interface JSONSelectable {
      /**
      * **iep.case_manager_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      case_manager_id: string | null;
      /**
      * **iep.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **iep.end_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      end_date: db.DateString;
      /**
      * **iep.iep_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      iep_id: string;
      /**
      * **iep.start_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      start_date: db.DateString;
      /**
      * **iep.student_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      student_id: string | null;
    }
    export interface Whereable {
      /**
      * **iep.case_manager_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      case_manager_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **iep.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **iep.end_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      end_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **iep.iep_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      iep_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **iep.start_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      start_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **iep.student_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      student_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **iep.case_manager_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      case_manager_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **iep.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **iep.end_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      end_date: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **iep.iep_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      iep_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **iep.start_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      start_date: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **iep.student_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      student_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **iep.case_manager_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      case_manager_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **iep.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **iep.end_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      end_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **iep.iep_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      iep_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **iep.start_date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      start_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **iep.student_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      student_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'iep_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **migrations**
   * - Table in database
   */
  export namespace migrations {
    export type Table = 'migrations';
    export interface Selectable {
      /**
      * **migrations.executed_at**
      * - `timestamp` in database
      * - Nullable, default: `CURRENT_TIMESTAMP`
      */
      executed_at: Date | null;
      /**
      * **migrations.hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      hash: string;
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **migrations.executed_at**
      * - `timestamp` in database
      * - Nullable, default: `CURRENT_TIMESTAMP`
      */
      executed_at: db.TimestampString | null;
      /**
      * **migrations.hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      hash: string;
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **migrations.executed_at**
      * - `timestamp` in database
      * - Nullable, default: `CURRENT_TIMESTAMP`
      */
      executed_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations.hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **migrations.executed_at**
      * - `timestamp` in database
      * - Nullable, default: `CURRENT_TIMESTAMP`
      */
      executed_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **migrations.hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      hash: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **migrations.executed_at**
      * - `timestamp` in database
      * - Nullable, default: `CURRENT_TIMESTAMP`
      */
      executed_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **migrations.hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'migrations_name_key' | 'migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **paras_assigned_to_case_manager**
   * - Table in database
   */
  export namespace paras_assigned_to_case_manager {
    export type Table = 'paras_assigned_to_case_manager';
    export interface Selectable {
      /**
      * **paras_assigned_to_case_manager.case_manager_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      case_manager_id: string;
      /**
      * **paras_assigned_to_case_manager.para_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      para_id: string;
    }
    export interface JSONSelectable {
      /**
      * **paras_assigned_to_case_manager.case_manager_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      case_manager_id: string;
      /**
      * **paras_assigned_to_case_manager.para_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      para_id: string;
    }
    export interface Whereable {
      /**
      * **paras_assigned_to_case_manager.case_manager_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      case_manager_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **paras_assigned_to_case_manager.para_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      para_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **paras_assigned_to_case_manager.case_manager_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      case_manager_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **paras_assigned_to_case_manager.para_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      para_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **paras_assigned_to_case_manager.case_manager_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      case_manager_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **paras_assigned_to_case_manager.para_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      para_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'paras_assigned_to_case_manager_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **session**
   * - Table in database
   */
  export namespace session {
    export type Table = 'session';
    export interface Selectable {
      /**
      * **session.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires_at: Date;
      /**
      * **session.session_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      session_id: string;
      /**
      * **session.session_token**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      session_token: string;
      /**
      * **session.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
    }
    export interface JSONSelectable {
      /**
      * **session.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires_at: db.TimestampTzString;
      /**
      * **session.session_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      session_id: string;
      /**
      * **session.session_token**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      session_token: string;
      /**
      * **session.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
    }
    export interface Whereable {
      /**
      * **session.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **session.session_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      session_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **session.session_token**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      session_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **session.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **session.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **session.session_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      session_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **session.session_token**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      session_token: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **session.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **session.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **session.session_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      session_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **session.session_token**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      session_token?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **session.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'session_pkey' | 'session_session_token_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **student**
   * - Table in database
   */
  export namespace student {
    export type Table = 'student';
    export interface Selectable {
      /**
      * **student.assigned_case_manager_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      assigned_case_manager_id: string | null;
      /**
      * **student.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **student.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string;
      /**
      * **student.grade**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      grade: number;
      /**
      * **student.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string;
      /**
      * **student.student_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      student_id: string;
    }
    export interface JSONSelectable {
      /**
      * **student.assigned_case_manager_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      assigned_case_manager_id: string | null;
      /**
      * **student.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **student.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string;
      /**
      * **student.grade**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      grade: number;
      /**
      * **student.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string;
      /**
      * **student.student_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      student_id: string;
    }
    export interface Whereable {
      /**
      * **student.assigned_case_manager_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      assigned_case_manager_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **student.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **student.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **student.grade**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      grade?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **student.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **student.student_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      student_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **student.assigned_case_manager_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      assigned_case_manager_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **student.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **student.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **student.grade**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      grade: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **student.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **student.student_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      student_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **student.assigned_case_manager_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      assigned_case_manager_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **student.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **student.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **student.grade**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      grade?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **student.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **student.student_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      student_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'student_email_key' | 'student_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **task**
   * - Table in database
   */
  export namespace task {
    export type Table = 'task';
    export interface Selectable {
      /**
      * **task.assignee_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      assignee_id: string | null;
      /**
      * **task.benchmark_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      benchmark_id: string | null;
      /**
      * **task.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **task.seen**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      seen: boolean;
      /**
      * **task.task_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      task_id: string;
    }
    export interface JSONSelectable {
      /**
      * **task.assignee_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      assignee_id: string | null;
      /**
      * **task.benchmark_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      benchmark_id: string | null;
      /**
      * **task.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **task.seen**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      seen: boolean;
      /**
      * **task.task_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      task_id: string;
    }
    export interface Whereable {
      /**
      * **task.assignee_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      assignee_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **task.benchmark_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      benchmark_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **task.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **task.seen**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      seen?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **task.task_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      task_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **task.assignee_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      assignee_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **task.benchmark_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      benchmark_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **task.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **task.seen**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      seen?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **task.task_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      task_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **task.assignee_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      assignee_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **task.benchmark_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      benchmark_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **task.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **task.seen**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      seen?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **task.task_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      task_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'benchmark_assignee_unique' | 'task_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **trial_data**
   * - Table in database
   */
  export namespace trial_data {
    export type Table = 'trial_data';
    export interface Selectable {
      /**
      * **trial_data.benchmark_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      benchmark_id: string;
      /**
      * **trial_data.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **trial_data.created_by_user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      created_by_user_id: string | null;
      /**
      * **trial_data.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
      /**
      * **trial_data.submitted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      submitted: boolean;
      /**
      * **trial_data.success**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      success: number;
      /**
      * **trial_data.trial_data_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      trial_data_id: string;
      /**
      * **trial_data.unsuccess**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      unsuccess: number;
    }
    export interface JSONSelectable {
      /**
      * **trial_data.benchmark_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      benchmark_id: string;
      /**
      * **trial_data.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **trial_data.created_by_user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      created_by_user_id: string | null;
      /**
      * **trial_data.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
      /**
      * **trial_data.submitted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      submitted: boolean;
      /**
      * **trial_data.success**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      success: number;
      /**
      * **trial_data.trial_data_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      trial_data_id: string;
      /**
      * **trial_data.unsuccess**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      unsuccess: number;
    }
    export interface Whereable {
      /**
      * **trial_data.benchmark_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      benchmark_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trial_data.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trial_data.created_by_user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      created_by_user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trial_data.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trial_data.submitted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      submitted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trial_data.success**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      success?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trial_data.trial_data_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      trial_data_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trial_data.unsuccess**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      unsuccess?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **trial_data.benchmark_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      benchmark_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **trial_data.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **trial_data.created_by_user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      created_by_user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **trial_data.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **trial_data.submitted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      submitted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **trial_data.success**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      success: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **trial_data.trial_data_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      trial_data_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **trial_data.unsuccess**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      unsuccess: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **trial_data.benchmark_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      benchmark_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **trial_data.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **trial_data.created_by_user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      created_by_user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **trial_data.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **trial_data.submitted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      submitted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **trial_data.success**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      success?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **trial_data.trial_data_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      trial_data_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **trial_data.unsuccess**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      unsuccess?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'trial_data_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **trial_data_file**
   * - Table in database
   */
  export namespace trial_data_file {
    export type Table = 'trial_data_file';
    export interface Selectable {
      /**
      * **trial_data_file.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **trial_data_file.file_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      file_id: string | null;
      /**
      * **trial_data_file.trial_data_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      trial_data_id: string | null;
      /**
      * **trial_data_file.trial_file_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      trial_file_id: string;
    }
    export interface JSONSelectable {
      /**
      * **trial_data_file.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **trial_data_file.file_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      file_id: string | null;
      /**
      * **trial_data_file.trial_data_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      trial_data_id: string | null;
      /**
      * **trial_data_file.trial_file_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      trial_file_id: string;
    }
    export interface Whereable {
      /**
      * **trial_data_file.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trial_data_file.file_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      file_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trial_data_file.trial_data_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      trial_data_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trial_data_file.trial_file_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      trial_file_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **trial_data_file.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **trial_data_file.file_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      file_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **trial_data_file.trial_data_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      trial_data_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **trial_data_file.trial_file_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      trial_file_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **trial_data_file.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **trial_data_file.file_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      file_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **trial_data_file.trial_data_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      trial_data_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **trial_data_file.trial_file_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      trial_file_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'trial_data_file_pkey' | 'trial_data_file_trial_data_id_file_id_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user**
   * - Table in database
   */
  export namespace user {
    export type Table = 'user';
    export interface Selectable {
      /**
      * **user.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user.email_verified_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verified_at: Date | null;
      /**
      * **user.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string;
      /**
      * **user.image_url**
      * - `text` in database
      * - Nullable, no default
      */
      image_url: string | null;
      /**
      * **user.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string;
      /**
      * **user.role**
      *
      * User role: user, para, case_manager, or admin
      * - `text` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **user.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      user_id: string;
    }
    export interface JSONSelectable {
      /**
      * **user.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user.email_verified_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verified_at: db.TimestampTzString | null;
      /**
      * **user.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string;
      /**
      * **user.image_url**
      * - `text` in database
      * - Nullable, no default
      */
      image_url: string | null;
      /**
      * **user.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string;
      /**
      * **user.role**
      *
      * User role: user, para, case_manager, or admin
      * - `text` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **user.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      user_id: string;
    }
    export interface Whereable {
      /**
      * **user.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.email_verified_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verified_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.image_url**
      * - `text` in database
      * - Nullable, no default
      */
      image_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.role**
      *
      * User role: user, para, case_manager, or admin
      * - `text` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.email_verified_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verified_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.image_url**
      * - `text` in database
      * - Nullable, no default
      */
      image_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.role**
      *
      * User role: user, para, case_manager, or admin
      * - `text` in database
      * - `NOT NULL`, no default
      */
      role: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      user_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.email_verified_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verified_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.image_url**
      * - `text` in database
      * - Nullable, no default
      */
      image_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.role**
      *
      * User role: user, para, case_manager, or admin
      * - `text` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      user_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_email_key' | 'user_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = account.Table | benchmark.Table | file.Table | goal.Table | iep.Table | migrations.Table | paras_assigned_to_case_manager.Table | session.Table | student.Table | task.Table | trial_data.Table | trial_data_file.Table | user.Table;
    export type Selectable = account.Selectable | benchmark.Selectable | file.Selectable | goal.Selectable | iep.Selectable | migrations.Selectable | paras_assigned_to_case_manager.Selectable | session.Selectable | student.Selectable | task.Selectable | trial_data.Selectable | trial_data_file.Selectable | user.Selectable;
    export type JSONSelectable = account.JSONSelectable | benchmark.JSONSelectable | file.JSONSelectable | goal.JSONSelectable | iep.JSONSelectable | migrations.JSONSelectable | paras_assigned_to_case_manager.JSONSelectable | session.JSONSelectable | student.JSONSelectable | task.JSONSelectable | trial_data.JSONSelectable | trial_data_file.JSONSelectable | user.JSONSelectable;
    export type Whereable = account.Whereable | benchmark.Whereable | file.Whereable | goal.Whereable | iep.Whereable | migrations.Whereable | paras_assigned_to_case_manager.Whereable | session.Whereable | student.Whereable | task.Whereable | trial_data.Whereable | trial_data_file.Whereable | user.Whereable;
    export type Insertable = account.Insertable | benchmark.Insertable | file.Insertable | goal.Insertable | iep.Insertable | migrations.Insertable | paras_assigned_to_case_manager.Insertable | session.Insertable | student.Insertable | task.Insertable | trial_data.Insertable | trial_data_file.Insertable | user.Insertable;
    export type Updatable = account.Updatable | benchmark.Updatable | file.Updatable | goal.Updatable | iep.Updatable | migrations.Updatable | paras_assigned_to_case_manager.Updatable | session.Updatable | student.Updatable | task.Updatable | trial_data.Updatable | trial_data_file.Updatable | user.Updatable;
    export type UniqueIndex = account.UniqueIndex | benchmark.UniqueIndex | file.UniqueIndex | goal.UniqueIndex | iep.UniqueIndex | migrations.UniqueIndex | paras_assigned_to_case_manager.UniqueIndex | session.UniqueIndex | student.UniqueIndex | task.UniqueIndex | trial_data.UniqueIndex | trial_data_file.UniqueIndex | user.UniqueIndex;
    export type Column = account.Column | benchmark.Column | file.Column | goal.Column | iep.Column | migrations.Column | paras_assigned_to_case_manager.Column | session.Column | student.Column | task.Column | trial_data.Column | trial_data_file.Column | user.Column;
  
    export type AllBaseTables = [account.Table, benchmark.Table, file.Table, goal.Table, iep.Table, migrations.Table, paras_assigned_to_case_manager.Table, session.Table, student.Table, task.Table, trial_data.Table, trial_data_file.Table, user.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [account.Table, benchmark.Table, file.Table, goal.Table, iep.Table, migrations.Table, paras_assigned_to_case_manager.Table, session.Table, student.Table, task.Table, trial_data.Table, trial_data_file.Table, user.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "account": account.Selectable;
    "benchmark": benchmark.Selectable;
    "file": file.Selectable;
    "goal": goal.Selectable;
    "iep": iep.Selectable;
    "migrations": migrations.Selectable;
    "paras_assigned_to_case_manager": paras_assigned_to_case_manager.Selectable;
    "session": session.Selectable;
    "student": student.Selectable;
    "task": task.Selectable;
    "trial_data": trial_data.Selectable;
    "trial_data_file": trial_data_file.Selectable;
    "user": user.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "account": account.JSONSelectable;
    "benchmark": benchmark.JSONSelectable;
    "file": file.JSONSelectable;
    "goal": goal.JSONSelectable;
    "iep": iep.JSONSelectable;
    "migrations": migrations.JSONSelectable;
    "paras_assigned_to_case_manager": paras_assigned_to_case_manager.JSONSelectable;
    "session": session.JSONSelectable;
    "student": student.JSONSelectable;
    "task": task.JSONSelectable;
    "trial_data": trial_data.JSONSelectable;
    "trial_data_file": trial_data_file.JSONSelectable;
    "user": user.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "account": account.Whereable;
    "benchmark": benchmark.Whereable;
    "file": file.Whereable;
    "goal": goal.Whereable;
    "iep": iep.Whereable;
    "migrations": migrations.Whereable;
    "paras_assigned_to_case_manager": paras_assigned_to_case_manager.Whereable;
    "session": session.Whereable;
    "student": student.Whereable;
    "task": task.Whereable;
    "trial_data": trial_data.Whereable;
    "trial_data_file": trial_data_file.Whereable;
    "user": user.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "account": account.Insertable;
    "benchmark": benchmark.Insertable;
    "file": file.Insertable;
    "goal": goal.Insertable;
    "iep": iep.Insertable;
    "migrations": migrations.Insertable;
    "paras_assigned_to_case_manager": paras_assigned_to_case_manager.Insertable;
    "session": session.Insertable;
    "student": student.Insertable;
    "task": task.Insertable;
    "trial_data": trial_data.Insertable;
    "trial_data_file": trial_data_file.Insertable;
    "user": user.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "account": account.Updatable;
    "benchmark": benchmark.Updatable;
    "file": file.Updatable;
    "goal": goal.Updatable;
    "iep": iep.Updatable;
    "migrations": migrations.Updatable;
    "paras_assigned_to_case_manager": paras_assigned_to_case_manager.Updatable;
    "session": session.Updatable;
    "student": student.Updatable;
    "task": task.Updatable;
    "trial_data": trial_data.Updatable;
    "trial_data_file": trial_data_file.Updatable;
    "user": user.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "account": account.UniqueIndex;
    "benchmark": benchmark.UniqueIndex;
    "file": file.UniqueIndex;
    "goal": goal.UniqueIndex;
    "iep": iep.UniqueIndex;
    "migrations": migrations.UniqueIndex;
    "paras_assigned_to_case_manager": paras_assigned_to_case_manager.UniqueIndex;
    "session": session.UniqueIndex;
    "student": student.UniqueIndex;
    "task": task.UniqueIndex;
    "trial_data": trial_data.UniqueIndex;
    "trial_data_file": trial_data_file.UniqueIndex;
    "user": user.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "account": account.Column;
    "benchmark": benchmark.Column;
    "file": file.Column;
    "goal": goal.Column;
    "iep": iep.Column;
    "migrations": migrations.Column;
    "paras_assigned_to_case_manager": paras_assigned_to_case_manager.Column;
    "session": session.Column;
    "student": student.Column;
    "task": task.Column;
    "trial_data": trial_data.Column;
    "trial_data_file": trial_data_file.Column;
    "user": user.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "account": account.SQL;
    "benchmark": benchmark.SQL;
    "file": file.SQL;
    "goal": goal.SQL;
    "iep": iep.SQL;
    "migrations": migrations.SQL;
    "paras_assigned_to_case_manager": paras_assigned_to_case_manager.SQL;
    "session": session.SQL;
    "student": student.SQL;
    "task": task.SQL;
    "trial_data": trial_data.SQL;
    "trial_data_file": trial_data_file.SQL;
    "user": user.SQL;
  }[T];

}
